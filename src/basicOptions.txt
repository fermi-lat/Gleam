//##############################################################
//
// basic Job options file for a Gleam execution
// $Header: /nfs/slac/g/glast/ground/cvs/Gleam/src/basicOptions.txt,v 1.148 2011/12/12 21:00:53 heather Exp $

// primary DLLs, including auditor 

ApplicationMgr.DLLs+= { "GaudiAlg", "GaudiAud"};
ApplicationMgr.ExtSvc += {"ChronoStatSvc"};
AuditorSvc.Auditors = {"ChronoAuditor"};

// ----------------------------
// setup basic event loop stuff
//
ApplicationMgr.ExtSvc += { "DbEvtSelector/EventSelector" };

ApplicationMgr.HistogramPersistency = "NONE";

EventPersistencySvc.CnvServices = {"EventCnvSvc"};
//EventSelector.Input = "SVC='DbEvtSelector'";
//EventSelector.PrintFreq = -1;


// ----------------------------
//  a structure for the topalg, using sequencer steps

ApplicationMgr.TopAlg = {
      "Sequencer/Top" };

//the top sequence loop
Top.Members={
    "Sequencer/Event"};

Event.Members = {
    "Sequencer/Generation",
    "Sequencer/CalibrationUpdate",
    "Sequencer/Digitization",
    "Sequencer/TriggerTest",   // can reject events, set TriggerAlg.mask = 0 to pass all
    "Sequencer/CalDigitization",
    "Sequencer/Triggered" 
};

// FluxAlg branch for "TimeTicks" 
// (note that if you override Members, this must be too)

Event.BranchMembers = {"Generation", "ExposureAlg"};

// can substitute mcRootReaderAlg here!

Generation.Members = {
    "FluxAlg", 
    "CurrentEventAlg",
    //"PointInfoAlg",  // this will be handled by PtValsAlg now
    "G4Generator" };
  

// These algorithms run before digitization or reconstruction
// Currently, only TKR is handled this way

CalibrationUpdate.Members={
    "TkrCalibAlg"     // found in TkrUtil
    };

// ----------------------------
//  Digitization
//
ApplicationMgr.DLLs +={ "TkrUtil", "TkrDigi", "CalDigi", "AcdDigi"  };
Digitization.Members = { 
    "TkrDigiAlg",
    "AcdDigiAlg"
    };

// this sequence contains the trigger test
TriggerTest.Members = {"TriggerInfoAlg", "TriggerAlg", "Count/trigger", "TriRowBitsAlg" };

// We'll reactivate this later once EbfWriter is updated a bit for 4 ranges
CalDigitization.Members = { "CalDigiAlg" };

// this sequence runs if the event passes the trigger

/// ADW: Only run NtupleMaker once for right now
Triggered.Members={
    "Sequencer/Filter", // can also cause rejection
    "Sequencer/ReconCalibrationUpdate",
    "Sequencer/Reconstruction",
    "Sequencer/FilterPerformance",
    "Sequencer/User",
    "Sequencer/EventDisplay",
    "Sequencer/NtupleMaker1",
//    "Sequencer/NtupleMaker2",
    "Sequencer/Output"
 };


// ----------------------------
//  Trigger and livetime
ApplicationMgr.DLLs +={ "Trigger"};
ApplicationMgr.ExtSvc += { "LivetimeSvc"}; 
LivetimeSvc.InterleaveMode = false; // interleave mode kills events on a statistical basis 
TriggerAlg.mask = "0xffffffff"; // all bits on by default: reject if none set (e.g., missed)

// The following is to use the ConfigSvc to configure the trigger
TriggerAlg.engine="ConfigSvc"; // use ConfigSvc to configure trigger engines. The following options control the configuration:
TriggerAlg.applyPrescales=true; // do trigger engine based prescaling
//TriggerAlg.applyWindowMask=true; // only use event if the window was open
//TriggerAlg.applyDeadtime=true; // throw away events if GEM is busy
//TriggerAlg.useGltWordForData=true; //when prescaling data use Glt word instead of Gem word


// ----------------------------
//  onboard filter 

ApplicationMgr.DLLs  += { "EbfWriter", "OnboardFilter"};
Filter.Members       += {"EbfWriter", "OnboardFilter", "Count/downlink"}; // this guy can cause rejection

// Feed all events to the filters
EbfWriter.ReqGemTrig = false;

// to specify a different set of calibrations for recon (TKR only)

ReconCalibrationUpdate.Members = {};

// ----------------------------
// Reconstruction

ApplicationMgr.ExtSvc += { "GlastPropagatorSvc" };

ApplicationMgr.DLLs +={ 
    "CalRecon", 
    "TkrRecon"
    };
Reconstruction.Members={ 
    "Sequencer/Cal1", 
    "Sequencer/Tkr",
    "Sequencer/Cal2",
    "Sequencer/TkrIter",
    "Sequencer/Acd",
    "Sequencer/Gcr"
    };


// Analyzes the performance of the filter (not ordinarily invoked)

//FilterPerformance.Members = {"FilterTracks", "FilterAlg"}; // for study of performance
FilterPerformance.Members = {};

// PlaceHolder for User routine, for example UserAlg
//User.Members = {"UserAlg"};
User.Members = {};

// Members are set in guiOptions, if enabled
// the display routines have a null execute() method, but
// need to be in the Gaudi sequence so it will initialize

EventDisplay.Members = {};
 
// ----------------------------
// Output

ApplicationMgr.DLLs +={"RootIo"}; 
Output.Members = {     
    "FhSetAlg",
    "FhSetMeritAlg",
    "mcRootWriterAlg", 
    "digiRootWriterAlg", 
    "reconRootWriterAlg",
    "relationRootWriterAlg"};

// default output to GLEAMROOT/data
mcRootWriterAlg.mcRootFile       = "$(GLEAMDATAPATH)/mc.root";
digiRootWriterAlg.digiRootFile   = "$(GLEAMDATAPATH)/digi.root";
reconRootWriterAlg.reconRootFile = "$(GLEAMDATAPATH)/recon.root";
relationRootWriterAlg.rootFile   = "$(GLEAMDATAPATH)/relations.root";
gcrSelectRootWriterAlg.gcrSelectRootFile = "$(GLEAMDATAPATH)/gcr.root";


// Sets up the meta (event collection) file
// Note, that if we eliminate all the RootWriterAlgs, we will not write
// this file - because it is the algorithms that start up the RootIoSvc
// RootIoSvc.MetaRootFileWrite = "$(GLEAMDATAPATH)/meta.root";

// ----------------------------
// ntuple generation 

ApplicationMgr.DLLs += {"AnalysisNtuple", "ntupleWriterSvc", "merit"
              , "GlastClassify" 
              };

/// ADW: Make development tuple with defaults (i.e. MeritTuple)
/// Can't duplicate Auditor yet...
AuditorSvc.Auditors += {"EventAuditor"}; // For event-by-event timing

NtupleMaker1.Members = {
    "PtValsAlg/PtValsAlg1",   
    "AnalysisNtupleAlg/AnalysisNtupleAlg1",
    "ClassifyAlg/ClassifyAlg1",       
    "FT1Alg/FT1Alg1",            
    "meritAlg/meritAlg1",        
    "McCoordsAlg/McCoordsAlg1",  
    "ObfCoordsAlg/ObfCoordsAlg1" 
 };


/// ADW: Make production tuple named PrimeTuple
/// Commented out for right now.
//NtupleMaker2.Members = {
//    "AnalysisNtupleAlg/AnalysisNtupleAlg2"
// };
//AnalysisNtupleAlg2.tupleName = "PrimeTuple";
//AnalysisNtupleAlg2.proTuple = true;

// default output to GLEAMDATAPATH
RootTupleSvc.filename            = "${GLEAMDATAPATH}/merit.root";
RootTupleSvc.RejectIfBad = false;


/// ADW: Friend the two tuples
RootTupleSvc.treeFriends = {"MeritTuple","PrimeTuple"};

// ----------------------------
// Reconstruction sequence details

// First pass of Cal Recon - full recon...
Cal1.Members = { 
    "CalXtalRecAlg",
    "CalClustersAlg/CalCluster",
    "CalEventEnergyAlg/CalRawEnergy",
    "CalClassifyAlg/CalClassify"
    };

// First pass of Tkr Recon
Tkr.Members = {
    "TkrReconAlg/TkrCluster",
    "TkrReconAlg/FirstPass"
    };

FirstPass.firstStage = 2;

// Second pass of Cal Recon - energy corrections only
Cal2.Members = {
    "CalEventEnergyAlg/second"
    };
TkrIter.Members = {
    "TkrReconAlg/Iteration"
    };

// ----------------------------
//   ACD recon

ApplicationMgr.DLLs += {"AcdUtil", "AcdRecon"};
Acd.Members = {"AcdReconAlg"};

// ----------------------------
//   GCR
ApplicationMgr.DLLs += {"GCRCalib"};

Gcr.Members = {"GcrReconAlg","GcrSelectAlg"};

GcrReconAlg.HFC_Or_TriggerEng4 = "ANYFILTER";
GcrReconAlg.InitAxis           = "TKR";

// ----------------------------
//  Geometry definition

ApplicationMgr.DLLs += {"GlastSvc"};
ApplicationMgr.ExtSvc += { "GlastDetSvc"};
GlastDetSvc.topVolume="LAT"; 
GlastDetSvc.xmlfile="$(XMLGEODBSXMLPATH)/flight/flightSegVols.xml";
GlastDetSvc.visitorMode="recon";

//  Randoms definition

ApplicationMgr.ExtSvc += { "GlastRandomSvc"};

// ----------------------------
//  Generation and simulation
//
//  get the parameters for simulation -- misnamed the file :-(
#include "$G4GENERATORJOBOPTIONSPATH/basicOptions.txt"
ApplicationMgr.DLLs +={ "G4Propagator"};

#include "$FLUXSVCJOBOPTIONSPATH/defaultOptions.txt"
FluxAlg.source_name="default";

// add in CRflux option
ApplicationMgr.DLLs +={ "CRflux" };
FluxSvc.source_lib += {
    "$(CRFLUXXMLPATH)/source_library.xml"};

// -------------------------------------------
//          tracker services
//
ApplicationMgr.ExtSvc   += { "TkrGeometrySvc"};
ApplicationMgr.ExtSvc   += { "TkrInitSvc"};

// this fixes a HE track pattern recognition problem
// *** it should be done in TkrRecon ***
TkrFilterFirst.FilterToolName="TkrCalFilterTool";

// -------------------------------------------
//  Calibration sevices
//
#include "$CALIBSVCJOBOPTIONSPATH/defaultOptions.txt"

// -------------------------------------------
//  MOOT services
//
#include "$MOOTSVCJOBOPTIONSPATH/defaultOptions.txt"
// Configuration.  This gets the configuration from files in the release
#include "$CONFIGSVCJOBOPTIONSPATH/configOptions_noMoot.txt"
//MootSvc.noMoot = true;  // turn off MOOT access by default for now

// -------------------------------------------
//  Calorimeter services
//
ApplicationMgr.Dlls += {"CalXtalResponse"};
#include "$CALXTALRESPONSEJOBOPTIONSPATH/defaultOptions.txt"

// -------------------------------------------

// add this service last since it may pick up  
// details from other services
ApplicationMgr.ExtSvc += {"RootTupleSvc"};

// output levels, including suppression to allow debug, info
mcRootWriterAlg.OutputLevel=3;
digiRootWriterAlg.OutputLevel=3;
reconRootWriterAlg.OutputLevel=3;
ToolSvc.OutputLevel=3;    // too verbose in debug
CalClustersAlg.OutputLevel=4; // too much info
TkrClusFirst.OutputLevel=4;
CalDigiAlg.OutputLevel=4;
TkrAlignmentSvc.OutputLevel=4;
TkrGeometrySvc.OutputLevel=4;
EbfWriter.OutputLevel=4;
ToolSvc.LastLayerCorrTool.OutputLevel=4; 
ToolSvc.OutputLevel=4;
CalXtalRecAlg.OutputLevel=4;
AcdReconAlg.OutputLevel=4; // suppress INFO complaint about no tracks
GcrReconAlg.OutputLevel           = 4;
GcrReconSelect.OutputLevel        = 4;
GcrSelectAlg.OutputLevel          = 4;
ToolSvc.GcrReconTool.OutputLevel  = 4;
ToolSvc.GcrSelectTool.OutputLevel = 4;

    
// Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )
MessageSvc.OutputLevel = 3;

//==============================================================
//
// End of job options file
//
//##############################################################

