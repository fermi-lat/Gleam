//
// Job Option file for readigi_runrecon:
// Read in a digi Root file and run recon on it!
//

//
// Things to be changed by the user can 
// be found at the end of the file!
//



//
// Primary DLLs, including auditor:
//
ApplicationMgr.DLLs   += {"GaudiAlg","GaudiAud"};
ApplicationMgr.ExtSvc += {"ChronoStatSvc"};
AuditorSvc.Auditors = {"ChronoAuditor"};

ChronoStatSvc.PrintSystemTime = true;
ChronoStatSvc.PrintEllapsedTime = true;



//
// Set up basic event loop: 
//
ApplicationMgr.ExtSvc += { "DbEvtSelector/EventSelector" };

ApplicationMgr.HistogramPersistency = "NONE";

EventPersistencySvc.CnvServices = {"EventCnvSvc"};
//EventSelector.Input = "SVC='DbEvtSelector'";
//EventSelector.PrintFreq = -1;


//
// A structure for the topalg, using sequencer steps:
//
ApplicationMgr.TopAlg = {"Sequencer/Top"};


//
// Define the top sequence loop:
//
Top.Members = {"Sequencer/Digitization",
               "Sequencer/Calibration",
               "Sequencer/Integrity",
               "Sequencer/NtupleMaker1",
               "Sequencer/NtupleMaker2",
               "Sequencer/Output"
                };

//
// Needed for EventIntegrityAlg sequence breaking:
//
Top.StopOverride = true;


//
// Digitization sequence: Read in digis from a ROOT file!
//
Digitization.Members +={"digiRootReaderAlg"};

//
// Need 'Rec' in the name to get the alignment:
// 
Calibration.Members = {"TkrCalibAlg/TkrReconCalib"};

//
// Using EventIntegrityAlg to decide if we run or skip recon: 
//     If the event passes, proceed as normal.
//     If EventIntegrityAlg is BAD, skip recon but output to file.
//
ApplicationMgr.DLLs += {"EventIntegrity"};

Integrity.Members    = {"EventIntegrityAlg",
                        "Sequencer/Filter",
                        "Sequencer/Reconstruction"};



//
// Detector services:
//
ApplicationMgr.DLLs   += {"GlastSvc"};
ApplicationMgr.ExtSvc += {"GlastDetSvc"};

GlastDetSvc.topVolume   = "LAT"; 
GlastDetSvc.visitorMode = "recon";



//
// Randoms definition:
//
ApplicationMgr.ExtSvc += {"GlastRandomSvc"};

// For event-by-event timing
//
AuditorSvc.Auditors   += {"EventAuditor"};
EventAuditor.algoNames = {"Event", "Generation", "Reconstruction","Cal1","Tkr", "Cal2", "TkrIter"};

//
// G4:
//
ApplicationMgr.DLLs += {"G4Generator","G4Propagator"};


//
// CAL Xtal respons::
//
ApplicationMgr.DLLs += {"CalXtalResponse"};


//
// Propagator:
//
ApplicationMgr.ExtSvc += {"GlastPropagatorSvc"};

 
//
// Reconstruction:
//
ApplicationMgr.DLLs += {"TkrUtil",
                        "CalRecon",
                        "TkrRecon",
                        "TkrDigi"};

Reconstruction.Members = {"Sequencer/Cal1", 
                          "Sequencer/Tkr",
                          "Sequencer/Cal2",
                          "Sequencer/TkrIter",
                          "Sequencer/Acd",
                          "Sequencer/Cal3"};


//
// Recon members:
//
Cal1.Members = {"CalXtalRecAlg",
                 "CalClustersAlg/CalCluster",
                 "CalEventEnergyAlg/CalRawEnergy",
                 "CalClassifyAlg/CalClassify"}; 
Cal2.Members = {"CalEventEnergyAlg/CalReconEnergy"};
Cal3.Members = {"GcrReconAlg","GcrSelectAlg"};

Tkr.Members     = {"TkrDigiTruncationAlg", "TkrReconAlg/FirstPass"};
TkrIter.Members = {"TkrReconAlg/Iteration"};


//
// GCR:
//
ApplicationMgr.DLLs += {"GCRCalib"};

// New:
GcrReconAlg.HFC_Or_TriggerEng4 = "ANYFILTER";
GcrReconAlg.InitAxis           = "TKR";


// New CAL calib file:
CalTupleAlg.NeighborXtalkToolName   = "NeighborXtalkTool";
CalXtalRecAlg.NeighborXtalkToolName = "NeighborXtalkTool";
ToolSvc.NeighborXtalkTool.txtFile   =  "$(LATCalibRoot)/CAL/LAT-flight_gain/pre_launch_calib_0608/digitization-licos-v3r9p12_077015240_digi_DIGI.neighborXtalk.txt";


//
// Decrease output:
//
CalReconEnergy.OutputLevel = 5;  


//
// ACD recon:
//
ApplicationMgr.DLLs += {"AcdUtil", "AcdRecon"};
Acd.Members = {"AcdReconAlgV2"}; // ACD recon v2 only

//
// Merit and AnalysisNtuple:
//
ApplicationMgr.DLLs   += {"AnalysisNtuple","ntupleWriterSvc","GlastClassify"};
ApplicationMgr.ExtSvc += {"RootTupleSvc"};

//
// NtupleMaker: FT2, MeritTuple, Classification, FT1 and Obf
//
NtupleMaker1.Members = {"PtValsAlg/PtValsAlg1",   
                        "AnalysisNtupleAlg/AnalysisNtupleAlg1",
                        "ClassifyAlg/ClassifyAlg1",
                        "FT1Alg/FT1Alg1",                  
                        "ObfCoordsAlg/ObfCoordsAlg1" 
                       };


// AnalysisNtuple tools list (AnalysisNtupleAlg, xxxValsTools)
AnalysisNtupleAlg1.toolList = {"Glt","Acd2","TkrHit","Tkr", "Tree", "Vtx","Cal","Evt","Obf"};
AnalysisNtupleAlg1.realData = true; // removes any Mc tools
AnalysisNtupleAlg1.tupleName = "MeritTuple";

// Classification (ClassifyAlg)
ClassifyAlg1.UseTMine = true;
ClassifyAlg1.TMineCacheFile = "MeritTuple_cache.root";
ClassifyAlg1.xmlFileName = "$(EXTFILESSYS)/pass8Analysis/xml/Pass8_Analysis_Open.xml";

//
// S/C alignment (FT1Alg)
//
FT1Alg1.CorrectForAberration = true;
FT1Alg1.AlignmentFlavor      = "vanilla";


//
// Define the default output sequence (everything)
//
Output.Members  = {"FhSetAlg",
                   "FhSetMeritAlg",
                   "reconRootWriterAlg",
                   "relationRootWriterAlg",
                   "CalTupleAlg",
                   "gcrSelectRootWriterAlg"};

//
// Tracker geometry services:
//
ApplicationMgr.ExtSvc += {"TkrGeometrySvc"};
ApplicationMgr.ExtSvc += {"TkrInitSvc"};

//
// Geometry: Use flight geometry, don't remove!
//
GlastDetSvc.xmlfile = "$(XMLGEODBSXMLPATH)/flight01/flightSegVols.xml";

//
// Calibrations
//
#include "$GLEAMJOBOPTIONSPATH/jobOptions/pipeline/calibrations.txt"


//
// Start up a CalFailureModeSvc:
//
ApplicationMgr.ExtSvc += {"CalFailureModeSvc"};


//
// Always fill ntuples:
//
RootTupleSvc.RejectIfBad = false;


// 
// Root IO:
//
ApplicationMgr.DLLs   += {"RootIo"};
ApplicationMgr.ExtSvc += {"RootIoSvc"}; 


//
// Must use RootIo as executable, not Gaudi event loop!
//
ApplicationMgr.Runable = "RootIoSvc"; 
 


//-------------------------------------------------
// The following things can be changed by the user
//


// 
// Set output level threshold:
//  2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL
//
MessageSvc.OutputLevel = 3;

//
// TKR output:
//
TkrAlignmentSvc.OutputLevel = 4;
TkrGeometrySvc.OutputLevel  = 4;
TkrBadStripsSvc.OutputLevel = 4;

//
// GCR Output level:
//
GcrReconAlg.OutputLevel           = 4;
GcrReconSelect.OutputLevel        = 4;
GcrSelectAlg.OutputLevel          = 4;
ToolSvc.GcrReconTool.OutputLevel  = 4; 
ToolSvc.GcrSelectTool.OutputLevel = 4; 


// 
// Number of events:
//
ApplicationMgr.EvtMax = 5;



//
// Name of input digi Root file:
//
digiRootReaderAlg.digiRootFileList = {"digi.root"};

//
// Name of input FT2 file (PtValsAlg)
//
PtValsAlg1.PointingHistory = {"FT2_Gleam.fits", "", ""};

//
// Name of output Merit Root file:
//
RootTupleSvc.filename = "merit.root";


//
// Name of output recon Root file:
//
reconRootWriterAlg.reconRootFile = "recon.root";

//
// Name of output relation Root file:
//
relationRootWriterAlg.rootFile = "relation.root";

//
// Name of output CAL ntuple:
//
CalTupleAlg.tupleFilename = "caltuple.root";


//
// Name of GCR Root file:
//
gcrSelectRootWriterAlg.gcrSelectRootFile = "gcr.root";




//
// The Doors .....
//
