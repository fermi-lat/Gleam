//
// Job Option file for fits2digi/ldf2digi: 
//


//
// Things to be changed by the user can 
// be found at the end of the file!
//


//
// Primary DLLs, including auditor: 
//
ApplicationMgr.DLLs   += {"GaudiAlg",
                          "GaudiAud"};
ApplicationMgr.DLLs   += {"MootSvc"};

ApplicationMgr.ExtSvc += {"ChronoStatSvc"};
ApplicationMgr.ExtSvc += {"MootSvc"};

AuditorSvc.Auditors    = {"ChronoAuditor"};


//
// A structure for the topalg, using sequencer steps:
//
ApplicationMgr.TopAlg = {"Sequencer/Top"};


//
// Define the top sequence loop:
//
Top.Members = {"Sequencer/Triggered"};


//
// Define the Triggered sequence:
//
Triggered.Members = {"Sequencer/Trigger",
                     "Sequencer/Output"};


//
// Services:
//
ApplicationMgr.DLLs   += {"GlastSvc"};
ApplicationMgr.ExtSvc += {"GlastDetSvc"};

GlastDetSvc.topVolume   = "LAT"; 
GlastDetSvc.visitorMode = "recon";


// Configuration.  This get the configuration from MOOT
#include "$CONFIGSVCROOT/src/configOptions_moot.txt"

// Crash on FATAL:
MootSvc.ExitOnFatal = true;


//
// Define the Trigger sequence:
//
ApplicationMgr.DLLs   += {"Trigger"};
Trigger.Members        = {"TriggerAlg","TriRowBitsAlg"};
ApplicationMgr.ExtSvc += {"LivetimeSvc"};
LivetimeSvc.Deadtime   = 0; // disable this for real data!


//
// Trigger engines: Not applying any prescales for real data!
//
TriggerAlg.engine = "ConfigSvc";


//
// Define the Output sequence:
//
ApplicationMgr.DLLs += {"RootIo"}; 
Output.Members       = {"FhSetAlg","digiRootWriterAlg"};

//
// Use the LDF converter service to read in LDF files:
//
ApplicationMgr.DLLs   += {"LdfConverter"};
ApplicationMgr.ExtSvc += {"LdfEventSelector/EventSelector","LdfCnvSvc/EventCnvSvc"};


//
// Services:
//
EventPersistencySvc.CnvServices = {"EventCnvSvc"};


//
// Instrument:
// 
EventSelector.Instrument = "LAT";


//
// Checking for GEM Conditions Summary Word == 0:
//
EventSelector.GemZeroCheck = 1;

//
// For new CAL Trigger:
//
ApplicationMgr.DLLs += {"CalXtalResponse"};

#include "$GLEAMROOT/src/jobOptions/pipeline/calibrations.txt"

//
// Start up a CalFailureModeSvc:
//
ApplicationMgr.ExtSvc += {"CalFailureModeSvc"};

//
// OBF:
//
ApplicationMgr.DLLs += {"EbfWriter","OnboardFilter"};
Trigger.Members     += {"EbfWriter","OnboardFilter"};

// Feed all events to the filters:
EbfWriter.ReqGemTrig = false;

// New stuff from Tracy:
EbfWriter.StoreOnTds = false;


//
// The following things can be changed by the user:
//


//
// Set output level threshold:
// 2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL 
//
MessageSvc.OutputLevel = 3;


//
// Number of events:
//
// Setting to zero allows the input files to determine when the event loop
// will be terminated
ApplicationMgr.EvtMax  = 0;


//
// Geometry: Use flight geometry!
//
GlastDetSvc.xmlfile = "$(XMLGEODBSXMLPATH)/flight/flightSegVols.xml";


// Evt file as input:
EventSelector.StorageType = "CCSDSFILE";


//
// Input evt file:
//
EventSelector.FileName = "file.evt";


//
// Output ROOT digi file:
//
digiRootWriterAlg.digiRootFile = "digi.root";


//
// The Doors .....
//
