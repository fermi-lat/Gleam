//
// Job Option file for generating MC:
//

//
// Things to be changed by the user can 
// be found at the end of the file!
//



//##############################################################
//
// basic Job options file for a Gleam execution
// $Header: /home/cvs/SLAC/Gleam/src/basicOptions.txt,v 1.103 2007/03/28
// 17:01:03 lsrea Exp $

//
// Primary DLLs, including auditor: 
//
ApplicationMgr.DLLs   += {"GaudiAlg","GaudiAud"};
ApplicationMgr.ExtSvc += {"ChronoStatSvc"};
AuditorSvc.Auditors    = {"ChronoAuditor"};

//
// Setup basic event loop stuff:
//
ApplicationMgr.ExtSvc = {"EventSelector/EventSelector"};

EventPersistencySvc.CnvServices = {"EventCnvSvc"};
EventSelector.Input             = "SVC='DbEvtSelector'";
EventSelector.PrintFreq         = -1;


// 
// A structure for the topalg, using sequencer steps:
//
ApplicationMgr.TopAlg = {"Sequencer/Top" };


//
// The top sequence loop:
//
Top.Members = {"Sequencer/Event"};

Event.Members = {"Sequencer/Generation",
                 "Sequencer/CalibrationUpdate",
                 "Sequencer/Digitization",
                 "Sequencer/TriggerTest",   // Can reject events, set TriggerAlg.mask = 0 to pass all!
                 "Sequencer/Triggered"};

// 
// FluxAlg branch for "TimeTicks" 
// (note that if you override Members, this must be too)
//
Event.BranchMembers = {"Generation", "ExposureAlg"};


//
// Can substitute mcRootReaderAlg here!
//
Generation.Members = {"FluxAlg", 
                      "PointInfoAlg", 
                      "G4Generator" };
  

// 
// These algorithms run before digitization or reconstruction.
// Currently, only TKR is handled this way.
//
CalibrationUpdate.Members = {"TkrCalibAlg"};     // Found in TkrUtil
    

// 
// Digitization:
//
ApplicationMgr.DLLs += {"TkrDigi","CalDigi","AcdDigi" };

Digitization.Members = {"TkrDigiAlg", 
                        "CalDigiAlg", 
                        "AcdDigiAlg"};

// 
// This sequence contains the trigger test:
// What about adding 'TriRowBitsAlg'?
//
TriggerTest.Members = {"TriggerAlg", "Count/trigger" };


// 
// This sequence runs if the event passes the trigger:
//
Triggered.Members = {"Sequencer/Filter",  // can also cause rejection
                     "Sequencer/ReconCalibrationUpdate",
                     "Sequencer/Reconstruction",
                     "Sequencer/FilterPerformance",
                     "Sequencer/EventDisplay",
                     "Sequencer/Output",
                     "Sequencer/NtupleMaker"};

// Configuration.  This get the configuration from MOOT
 #include "$CONFIGSVCROOT/src/configOptions_moot.txt"


//
// Trigger and livetime:
// 

ApplicationMgr.DLLs   += {"Trigger"};
ApplicationMgr.ExtSvc += {"LivetimeSvc"}; 

LivetimeSvc.Deadtime = 0;  // Default is now to disable this.
TriggerAlg.mask      = -1; // All bits on by default: reject if none set (e.g., missed)


//
// Trigger mask: Martin's stuff
//
TriggerAlg.engine          = "ConfigSvc";
TriggerAlg.applyWindowMask = true;  // To reject events with no trigger.


// 
// Onboard filter:
//
ApplicationMgr.DLLs  += {"EbfWriter","OnboardFilter"};
Filter.Members       += {"EbfWriter","OnboardFilter","Count/downlink"};  // This guy can cause rejection.
OnboardFilter.mask    = 0; // All bits off by default: no rejection.

// Reject events if not passed by the filter(s):
OnboardFilter.RejectEvents = true;

// Real calibrations for the gamma-filter:
OnboardFilter.FileNamePeds  = "cal_db_pedestals_flight";
OnboardFilter.FileNameGains = "cal_db_gains_flight";

// Correct DGN: Pre-scale factors are in $GLAST_EXT/rh9_gcc32/obf/B1-0-6/src/XFC_DB/src/DGN_gem.h
OnboardFilter.DgnConfig = "DGN_gem";

// Gamma, HIP and DGN in the accept decision:
// The order is defined in: OnboardFilterTds/vXXX/OnboardFilterTds/ObfFilterStatus.h
//                          GammaFilter=0,HIP,MIP,DGN.
//
OnboardFilter.FilterList = {0,1,3}; 


// 
// To specify a different set of calibrations for recon (TKR only):
//
ReconCalibrationUpdate.Members = {};



// 
// Reconstruction:
//
ApplicationMgr.ExtSvc += {"GlastPropagatorSvc"};

ApplicationMgr.DLLs += {"CalRecon", 
                        "TkrRecon", "TkrUtil"};

Reconstruction.Members = {"Sequencer/Cal1", 
                          "Sequencer/Tkr",
                          "Sequencer/Cal2",
                          "Sequencer/TkrIter",
                          "Sequencer/Acd",
                          "Sequencer/Cal3"};

//
// Analyzes the performance of the filter (not ordinarily invoked):
//
FilterPerformance.Members = {"FilterTracks", "FilterAlg"}; // For study of performance.
//FilterPerformance.Members = {};


//
// Members are set in guiOptions, if enabled
// the display routines have a null execute() method, but
// need to be in the Gaudi sequence so it will initialize
//
EventDisplay.Members = {};
 


// 
// Output:
//
ApplicationMgr.DLLs += {"RootIo"}; 

Output.Members = {"FhSetAlg",
                  "mcRootWriterAlg", 
                  "digiRootWriterAlg", 
                  "reconRootWriterAlg",
                  "relationRootWriterAlg"};
Output.Members += {"gcrSelectRootWriterAlg"};

// 
// Default output to GLEAMROOT/data:
//
mcRootWriterAlg.mcRootFile               = "mc.root";
digiRootWriterAlg.digiRootFile           = "digi.root";
reconRootWriterAlg.reconRootFile         = "reccon.root";
relationRootWriterAlg.rootFile           = "relations.root";
gcrSelectRootWriterAlg.gcrSelectRootFile = "gcr.root";

// 
// Ntuple generation :
//
ApplicationMgr.DLLs += {"AnalysisNtuple","ntupleWriterSvc","merit","GlastClassify" };

NtupleMaker.Members = {"AnalysisNtupleAlg", // AnaTup and Filter stuff into the tuple.
                       "ClassifyAlg",       // Atwood's Insightful Miner analysis.
                       "FT1Alg",            // Generate stuff to go into FT1  version from AnaTup.
                       "meritAlg",          // Some analysis for PSF.
                       "McCoordsAlg",       // Now in AnaTup.
                       "ObfCoordsAlg"       // Now in AnaTup.
                       };

AnalysisNtupleAlg.tupleName = "MeritTuple";

//
// Default output to GLEAMROOT/data:
//
RootTupleSvc.filename    = "merit.root";
RootTupleSvc.RejectIfBad = false;



// 
// Reconstruction sequence details:
//

//
// First pass of Cal Recon - full recon...
//
Cal1.Members = {"CalXtalRecAlg",
                "CalClustersAlg/first",
                "CalEventEnergyAlg/RawEnergy"};

//
// First pass of Tkr Recon:
//
Tkr.Members = {"TkrReconAlg/FirstPass"};


//
// Second pass of Cal Recon - energy corrections only:
//
Cal2.Members = {"CalEventEnergyAlg/second"};

TkrIter.Members = {"TkrReconAlg/Iteration"};

// GCR:
Cal3.Members = {"GcrReconAlg","GcrSelectAlg"};


//
// GCR:
//
ApplicationMgr.DLLs += {"GCRCalib"};

// New:
GcrReconAlg.HFC_Or_TriggerEng4 = "ANYFILTER";
GcrReconAlg.InitAxis           = "TKR";


// 
// ACD recon:
//
ApplicationMgr.DLLs += {"AcdUtil", "AcdRecon"};
Acd.Members          = {"AcdReconAlg"};



// 
// Geometry definition:
//
ApplicationMgr.DLLs    += {"GlastSvc"};
ApplicationMgr.ExtSvc  += {"GlastDetSvc"};

GlastDetSvc.topVolume   = "LAT"; 
GlastDetSvc.visitorMode = "recon";


//
// Randoms definition:
//
ApplicationMgr.ExtSvc += {"GlastRandomSvc"};



// 
//  Generation and simulation:
//

//
// Get the parameters for simulation -- misnamed the file :-(
//
#include "$G4GENERATORROOT/src/basicOptions.txt"
ApplicationMgr.DLLs +={ "G4Propagator"};


//
// Standard options for FluxSvc clients:
//
ApplicationMgr.ExtSvc += {"FluxSvc"};
ApplicationMgr.DLLs   += {"FluxSvc"}; 
FluxSvc.source_lib     = {"$(FLUXXMLPATH)/source_library.xml"};
ApplicationMgr.ExtSvc += {"ParticlePropertySvc"};

//
// FluxSvc controls the event loop:
//
ApplicationMgr.Runable= "FluxSvc";

//
// Append (or replace) the list of source library documents:
// 
FluxSvc.source_lib += {"$(G4GENERATORROOT)/src/test/test_sources.xml"};


//
// Add in CRflux option"
//
ApplicationMgr.DLLs += {"CRflux"};
FluxSvc.source_lib  += {"$(CRFLUXXMLPATH)/source_library.xml"};

//
// VDG sources: NB! test_sources.xml is incompatible with source_library.xml!
//
//FluxSvc.source_lib += {"$(FLUXXMLPATH)/test_sources.xml"};

FluxAlg.source_name = "default";


// 
// Tracker services:
//
ApplicationMgr.ExtSvc += {"TkrGeometrySvc"};
ApplicationMgr.ExtSvc += {"TkrInitSvc"};


// 
// This fixes a HE track pattern recognition problem:
// *** it should be done in TkrRecon ***
//
TkrFilterFirst.FilterToolName = "TkrCalFilterTool";


// 
// Calorimeter services:
//
ApplicationMgr.Dlls += {"CalXtalResponse"};


//
// Add this service last since it may pick up  
// details from other services:
//
ApplicationMgr.ExtSvc += {"RootTupleSvc"};


//
// Output levels, including suppression to allow debug, info:
//
mcRootWriterAlg.OutputLevel           = 3;
digiRootWriterAlg.OutputLevel         = 3;
reconRootWriterAlg.OutputLevel        = 3;
ToolSvc.OutputLevel                   = 3; // too verbose in debug
CalClustersAlg.OutputLevel            = 4; // too much info
TkrClusFirst.OutputLevel              = 4;
CalDigiAlg.OutputLevel                = 4;
TkrAlignmentSvc.OutputLevel           = 4;
TkrGeometrySvc.OutputLevel            = 4;
EbfWriter.OutputLevel                 = 4;
ToolSvc.LastLayerCorrTool.OutputLevel = 4; 
ToolSvc.OutputLevel                   = 4;
CalXtalRecAlg.OutputLevel             = 4;
AcdReconAlg.OutputLevel               = 4; // suppress INFO complaint about no tracks

//     
// Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL):
// 
MessageSvc.OutputLevel = 3;


//==============================================================
//
// End of job options file
//
//##############################################################



//
// More stuff:
//



//
// Generator cuts from G4 basic options:
//
G4Generator.defaultCutValue    = 0.7; 
G4Generator.defaultTkrCutValue = 0.1;
G4Generator.defaultCalCutValue = 0.7;


//
// Noise in Tracker (for ground):
//
ToolSvc.GeneralNoiseTool.occupancy = 4.e-7;



//
// Calibrations:
//
#include "$GLEAMROOT/src/jobOptions/pipeline/calibrations.txt"

//
// ACD:
//
AcdCalibSvc.DefaultFlavor          = "MC_OktoberFest07";
AcdCalibSvc.FlavorHighRange        = "ideal";
AcdCalibSvc.FlavorCoherentNoise    = "ideal";
AcdSimCalibSvc.DefaultFlavor       = "MC_OktoberFest07";
AcdSimCalibSvc.FlavorRange         = "ideal";
AcdSimCalibSvc.FlavorHighRange     = "ideal";
AcdSimCalibSvc.FlavorCoherentNoise = "ideal";
AcdSimCalibSvc.FlavorVeto          = "MC_OktoberFest07";
AcdSimCalibSvc.FlavorCno           = "ideal";

//
// Start up a CalFailureModeSvc:
//
ApplicationMgr.ExtSvc += {"CalFailureModeSvc"};


//
// The user should change the start time to pick up whatever 
// calibrations she wants:
//
FluxSvc.startDate = "2007-1-10 23:59:59";


//
// Run Caltuple:
//
Output.Members += {"CalTupleAlg"};


//
// Output levels:
//
mcRootWriterAlg.OutputLevel           = 3;
digiRootWriterAlg.OutputLevel         = 3;
reconRootWriterAlg.OutputLevel        = 3;
ToolSvc.OutputLevel                   = 3;
CalClustersAlg.OutputLevel            = 4;
TkrClusFirst.OutputLevel              = 4;
CalDigiAlg.OutputLevel                = 4;
TkrAlignmentSvc.OutputLevel           = 4;
TkrGeometrySvc.OutputLevel            = 4;
EbfWriter.OutputLevel                 = 4;
ToolSvc.LastLayerCorrTool.OutputLevel = 4; 
ToolSvc.OutputLevel                   = 4;
CalXtalRecAlg.OutputLevel             = 4;
second.OutputLevel                    = 5;
    




//
// The following things can be changed by the user:
//


//
// Set general output level threshold:
//    (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )
MessageSvc.OutputLevel = 3;


// 
// Number of events:
//
ApplicationMgr.EvtMax = 200000;


//
// Geometry:
//
GlastDetSvc.xmlfile = "$(XMLGEODBSXMLPATH)/latAssembly/latAssemblySegVols.xml";


//
// Particle source:
//
FluxAlg.source_name = "surface_muons";


//
// Run number (and random number seed):
//
GlastRandomSvc.RunNumber = 0;


//
// Output mc Root file:
//
mcRootWriterAlg.mcRootFile = "mc.root";

//
// Output recon Root file:
// 
reconRootWriterAlg.reconRootFile = "recon.root";

//
// Output digi Root file:
//
digiRootWriterAlg.digiRootFile = "digi.root";

relationRootWriterAlg.rootFile = "relations.root";

ApplicationMgr.ExtSvc += { "RootIoSvc" };  


//
// Output Merit tuple:
//
RootTupleSvc.TreeName  = "MeritTuple"; 
RootTupleSvc.filename  = "merit.root";


//
// Name of output CAL ntuple:
//
CalTupleAlg.tupleFilename = "caltuple.root";


// Name of GCR file:
gcrSelectRootWriterAlg.gcrSelectRootFile = "gcr.root";

// GCR Output level:
GcrReconAlg.OutputLevel           = 4;
GcrReconSelect.OutputLevel        = 4;
GcrSelectAlg.OutputLevel          = 4;
ToolSvc.GcrReconTool.OutputLevel  = 4; 
ToolSvc.GcrSelectTool.OutputLevel = 4; 


//
// The Doors ...
//
